#targetengine "session"var app_init_started = new DateApplication.prototype.LOGGING = true;Application.prototype.LOGGING_INFO = true;Application.prototype.LOGGING_DEBUG = true;Application.prototype.LOGGING_WARNING = true;Application.prototype.LOGGING_ERROR = true;Application.prototype.LOGGING_CRITICAL = true;Application.prototype.ROOT_DIRECTORY = $.fileName;#include "./lib/application/__init__.jsx"purge_addons()import_addons()#include "./lib/application/EventListeners/__init__.jsx"			app.menus[0].submenus.item('Cat&weazle').remove();app.scriptMenuActions.everyItem().remove();(function(){	var menuRoot = app.menus[0].submenus.add('Cat&weazle');	// 	var reloadInitDoc = app.scriptMenuActions.add("Reload initDoc");// 	reloadInitDoc.eventListeners.add("onInvoke", fReloadInitDoc, false);// 	menuRoot.menuItems.add(reloadInitDoc);        var reloadStandardLibrary = app.scriptMenuActions.add("reinit");    reloadStandardLibrary.eventListeners.add("onInvoke", function(){ app.doScript(File($.fileName), ScriptLanguage.JAVASCRIPT) }, false);        menuRoot.menuItems.add(reloadStandardLibrary);	// 	function fReloadInitDoc(){// 		var doc  = app.activeDocument;// 		var docPath = String(doc.fullName).split('/');// 		var initDocPath = '/Volumes/' + docPath.cut('1:-2').join('/') + '/scripts/initDoc.jsx';		// 		// 		try{ // 			app.doScript(File(initDocPath), ScriptLanguage.JAVASCRIPT, [doc]); // 			app.growl('initDoc reloaded for %s'.sprintf(doc.fullName))// 			}// 		catch(e) {app.growl(e.report())}// 		}		})();	var app_init_finished = new Datevar running_time = app_init_finished - app_init_startedapp.info('Finished application init. Took us %s ms'.format(running_time))function import_addons(){    try{         eval('#include "./lib/__init__.jsx"')        }        catch(e){         app.error(e);        }    app.debug('app.addons.length:' + app.addons.length)    }		function purge_addons(){        try{        number_of_addons = app.addons.length;        }    catch(e){        Application.prototype.addons = []        number_of_addons = 0        }                for(var i = number_of_addons; i > 0; i--){            addon = app.addons[i-1]            try{                                eval('delete ' + addon);                app.addons.splice(i-1)                }            catch(e){                 app.warning(app.addons[i] + ' was not purged')                app.error(e)                }            }      if(app.addons.length !== 0){        app.warning('Application add-ons were not purged properly on re-init')        }    }        