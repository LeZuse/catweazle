/* Docstring**/modules = [    'application/date_format',    'application/growl',    'application/logging',    'application/exparrot',    'application/error',    'json/json',    'arrayutils/each',    'arrayutils/map',    'arrayutils/filter',    'arrayutils/cut',    'stringutils/format',    'stringutils/multiReplace',    'stringutils/toTitleCase',    'gui/hub'    ];purge_addons()for(var i = 0; i < modules.length; i++){    import_path = app.ROOT_DIRECTORY + 'lib/' + modules[i] + '.jsx'    import_command = '#include "' + import_path + '"'    try{                eval(import_command)        }        catch(e){         app.error(modules[i] + ' was not imported!')        app.debug('\t' + e.report().split('\n').join('\n\t'))        app.debug('STACK\n\t' + $.stack.split('\n').join('\n\t'))        }    }app.debug('app.addons.length: ' + app.addons.length) app.info('Finished add-ons set-up.')    function purge_addons(){     try{        number_of_addons = app.addons.length;        }    catch(e){        Application.prototype.addons = []        number_of_addons = 0        }                for(var i = number_of_addons; i > 0; i--){            addon = app.addons[i-1]            try{                                eval('delete ' + addon);                app.addons.splice(i-1)                }                catch(e){                 app.warning(app.addons[i] + ' was not purged')                app.error(e.report())                }            }        if(app.addons.length !== 0){        app.warning('Application add-ons were not purged properly on re-init')        }    }