var Hub = function(parent){    var dlg = new Window('dialog', 'Hub', undefined,{        orientation: 'column',        alignChildren: 'fill',        margins: 5,        spacing: 0        });                dlg.command = dlg.add('group', undefined, undefined, {        alignChildren: 'fill',         orientation: 'column',         margins: 10})                dlg.command.field = dlg.command.add('edittext', [0, 0, 200, 20], '')    dlg.command.field.parent_object = this        dlg.msg = dlg.add('group', undefined, undefined, {        alignChildren: 'fill',        margins:10,         orientation: 'column'})            dlg.msg.msg = dlg.msg.add('statictext', [0, 0, 200, 250], '', {multiline: true})      var menu = {        name: 'Menu',                "1": ['center pivot', 'center_pivot'],                "_": {name: 'Developer menu',             'i': ['reload app_init', 'reload_app_init'],             'd': ['reload doc_init', 'reload_doc_init']},                "m": {name: 'Maintenance menu',            'c': ['check for updates', 'check_for_updates'],             'u': ['update database', 'update_database']},                "p": {name: 'Pointles Menu',            '1': ['one', 'jedna'],            '2': ['two', 'dva'],            's': {name: 'Submenu',                'q': ['Q', 'QQ'],                't':['T', 'TT']                },            '3': ['three', 'tri']}        }        dlg.command.field.onChanging = redraw_menu            this.parent = parent        this.name = parent.name    this.output = dlg.command.field.text        this.show = function(){         dlg.command.field.text = ''        redraw_menu()        dlg.command.field.active = true        dlg.show()         this.output = dlg.command.field.text        }                 function redraw_menu(){        var command_text = dlg.command.field.text         var current_layer = menu                function parse_layer(layer){                    var status_text = []            status_text.push(layer['name'] + '\n')            for(var key in layer){                if(key !== 'name'){                    value = layer[key]                    if(value.constructor.name === 'Array'){                        status_text.push('%s    %s'.format(key, value[0]))                        }                    else{                        status_text.push('%s    %s'.format(key, value['name']))                        }                    }                }        return status_text.join('\n')          }                                if(command_text === ''){            dlg.msg.msg.text = parse_layer(menu)            }                for(var i = 0; i < command_text.length; i++){//             app.debug('command_text: %s'.format(command_text))//             app.debug('i: %s'.format(i))//             app.debug("command_text.length: %s".format(command_text.length))                                    next_layer_code = command_text[i]//             app.debug('next_layer_code: %s'.format(next_layer_code))                      try{                current_layer = current_layer[next_layer_code]                dlg.msg.msg.text = parse_layer(current_layer)                                }           catch(e){ dlg.msg.msg.text = '' }                        if(current_layer.constructor.name === 'Array'){                this.output = current_layer[1]                app.debug('%s hub: %s selected (%s)'.format(this.parent_object.name, current_layer[1], command_text))                dlg.close()                }//             app.debug('----------------------')            }        }          }Application.prototype.hub = new Hub(app)