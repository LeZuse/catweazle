var Hub = function(parent, document_menus){    #include "hubmenu.jsx"    if(document_menus){            function MergeRecursive(obj1, obj2) {                    for (var p in obj2) {                try {                    // Property in destination object set; update its value.                    if ( obj2[p].constructor==Object ) {                        obj1[p] = MergeRecursive(obj1[p], obj2[p]);                                }                     else {                        obj1[p] = obj2[p];                                }                            }                 catch(e) {                    // Property in destination object not set; create it and set its value.                    obj1[p] = obj2[p];                           }                }                    return obj1;            }            menu = MergeRecursive(menu, document_menus);        }    // Nasty workaround    // I don't know why, but ID CS5 keeps on resetting    // the dialog panel, so it has to be recreated from scratch    function init(){        var dlg = new Window('dialog', 'Hub', undefined,{            orientation: 'column',            alignChildren: 'fill',            margins: 5,            spacing: 0            });                        dlg.command = dlg.add('group', undefined, undefined, {            alignChildren: 'fill',             orientation: 'column',             margins: 10})                        dlg.command.field = dlg.command.add('edittext', [0, 0, 200, 20], '')        dlg.command.field.parent_object = this                dlg.msg = dlg.add('group', undefined, undefined, {            alignChildren: 'fill',            margins:10,             orientation: 'column'})                    dlg.msg.msg = dlg.msg.add('statictext', [0, 0, 200, 250], '', {multiline: true})        dlg.command.field.onChanging = redraw_menu;                return dlg                }     var command = null // TODO: What's this?        var dlg = init()                    this.parent = parent        this.name = parent.name            this.show = function(){         dlg = init()        redraw_menu(dlg)        dlg.command.field.active = true               dlg.center()        return dlg.show()                                 }    this.execute = function(){        app.info(command + ', ' + dlg.command.field.text)        if(command.constructor.name === 'Function'){            command()            }                else{            try{                                var the_file = File(command)                                // XXX: This might look stupid,                 // but I couldn't manage to make                 // InDesign pass arguments in any other way                function callback(){                    eval("#include " + command)                    }                                                app.doScript(callback, ScriptLanguage.JAVASCRIPT, [dlg.command.field.text])                }            catch(f){                app.error(f)                }                        }        }                 function redraw_menu(){        var command_text = dlg.command.field.text         var current_layer = menu                function parse_layer(layer){                    var status_text = []            status_text.push(layer['name'] + '\n')            for(var key in layer){                 if(key !== 'name'){                    value = layer[key]                    if(value.constructor.name === 'Array'){                        status_text.push('%s    %s'.format(key, value[0]))                        }                    else{                        status_text.push('%s    %s'.format(key, value['name']))                        }                    }                }        return status_text.join('\n')          }                                if(command_text === ''){            dlg.msg.msg.text = parse_layer(menu)            }                for(var i = 0; i < command_text.length; i++){            next_layer_code = command_text[i]                      try{                current_layer = current_layer[next_layer_code]                dlg.msg.msg.text = parse_layer(current_layer)                                }           catch(e){ dlg.msg.msg.text = '' }                        if(current_layer.constructor.name === 'Array'){                this.output = current_layer[1]                command = current_layer[1]                dlg.close()                }            }        }          }Application.prototype.hub = new Hub(app, {})app.addons.push('Application.prototype.hub');